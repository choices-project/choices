#!/bin/bash

# AI New Task Instruction Script
# Usage: ./ai-new-task.sh "your task description here"
# This script provides comprehensive context for new AI agents

set -e

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Get the task description from arguments
TASK_DESCRIPTION="$*"

if [ -z "$TASK_DESCRIPTION" ]; then
    echo -e "${RED}‚ùå Error: Please provide a task description${NC}"
    echo "Usage: ./ai-new-task.sh \"your task description here\""
    echo ""
    echo "Examples:"
    echo "  ./ai-new-task.sh \"implement user feedback system\""
    echo "  ./ai-new-task.sh \"fix TypeScript errors in auth module\""
    echo "  ./ai-new-task.sh \"add new admin dashboard feature\""
    exit 1
fi

echo -e "${PURPLE}ü§ñ NEW AI TASK INSTRUCTIONS${NC}"
echo "====================================="
echo ""
echo -e "${GREEN}üìã TASK:${NC} $TASK_DESCRIPTION"
echo ""
echo -e "${BLUE}üéØ WORKING STYLE & EXPECTATIONS${NC}"
echo "====================================="
echo ""

echo -e "${GREEN}‚úÖ CORE PRINCIPLES TO FOLLOW:${NC}"
echo "‚Ä¢ Build tools first, then apply them systematically"
echo "‚Ä¢ Fix root causes, not symptoms"
echo "‚Ä¢ Follow best practices religiously"
echo "‚Ä¢ Be systematic and thorough - no shortcuts"
echo "‚Ä¢ Create reusable solutions"
echo "‚Ä¢ Only import necessary modules"
echo "‚Ä¢ Don't prefix variables with underscores"
echo "‚Ä¢ Wait for user approval before committing/deploying"
echo "‚Ä¢ Think first, ask for a plan before proceeding"
echo "‚Ä¢ Prioritize root cause fixes over quick fixes"
echo ""

echo -e "${RED}üö´ RED FLAGS (AVOID THESE):${NC}"
echo "‚Ä¢ Prefixing unused variables with _"
echo "‚Ä¢ Disabling ESLint rules"
echo "‚Ä¢ Using // eslint-disable-next-line"
echo "‚Ä¢ Quick fixes or workarounds"
echo "‚Ä¢ Manual one-time changes"
echo "‚Ä¢ Bypassing pre-commit hooks"
echo "‚Ä¢ Ignoring warnings"
echo "‚Ä¢ Reactive approaches"
echo "‚Ä¢ Treating symptoms instead of causes"
echo ""

echo -e "${YELLOW}ÔøΩÔøΩÔ∏è  PROJECT CONTEXT:${NC}"
echo "‚Ä¢ Next.js 14 application with TypeScript"
echo "‚Ä¢ Supabase for database and authentication"
echo "‚Ä¢ Vercel for deployment"
echo "‚Ä¢ Postgres exclusively (SQLite removed)"
echo "‚Ä¢ Service role only for admin database access"
echo "‚Ä¢ Environment variables managed via .env.local"
echo "‚Ä¢ Comprehensive testing and security evaluation"
echo "‚Ä¢ Row Level Security (RLS) enabled"
echo ""

echo -e "${BLUE}üìö DOCUMENTATION REQUIREMENTS:${NC}"
echo "‚Ä¢ Update relevant documentation files"
echo "‚Ä¢ Document any new features or changes"
echo "‚Ä¢ Update project status and roadmap"
echo "‚Ä¢ Include usage examples and instructions"
echo "‚Ä¢ Document any configuration changes"
echo "‚Ä¢ Update API documentation if needed"
echo ""

echo -e "${GREEN}üîß VERSION CONTROL REQUIREMENTS:${NC}"
echo "‚Ä¢ Create feature branches for new work"
echo "‚Ä¢ Use descriptive commit messages"
echo "‚Ä¢ Run pre-push validation before committing"
echo "‚Ä¢ Test thoroughly before pushing"
echo "‚Ä¢ Wait for CI approval before merging"
echo "‚Ä¢ Keep commits atomic and focused"
echo "‚Ä¢ Document changes in commit messages"
echo ""

echo -e "${YELLOW}üß™ TESTING REQUIREMENTS:${NC}"
echo "‚Ä¢ Test locally before pushing"
echo "‚Ä¢ Ensure all TypeScript checks pass"
echo "‚Ä¢ Verify ESLint rules are followed"
echo "‚Ä¢ Test with production build settings"
echo "‚Ä¢ Check for security vulnerabilities"
echo "‚Ä¢ Validate environment variables"
echo "‚Ä¢ Test critical functionality"
echo ""

echo -e "${PURPLE}üí° EFFECTIVE APPROACH PATTERN:${NC}"
echo "1. ANALYSIS: Understand the full scope and requirements"
echo "2. PLANNING: Create a systematic approach with tools"
echo "3. TOOL BUILDING: Build analysis/automation tools first"
echo "4. IMPLEMENTATION: Apply solutions systematically"
echo "5. TESTING: Thorough validation and testing"
echo "6. DOCUMENTATION: Update all relevant docs"
echo "7. VERSION CONTROL: Proper branching and commits"
echo ""

echo -e "${BLUE}ÔøΩÔøΩ SUCCESS METRICS:${NC}"
echo "‚Ä¢ Pre-commit hooks pass"
echo "‚Ä¢ No ESLint warnings"
echo "‚Ä¢ No TypeScript errors"
echo "‚Ä¢ Build succeeds"
echo "‚Ä¢ Code follows best practices"
echo "‚Ä¢ Documentation is updated"
echo "‚Ä¢ Version control is proper"
echo "‚Ä¢ User is satisfied with approach"
echo ""

echo -e "${GREEN}üîß AVAILABLE TOOLS:${NC}"
echo "‚Ä¢ ./safe-cleanup.sh --fix          # Safe code cleanup"
echo "‚Ä¢ ./safe-validation.sh             # Safe pre-push validation"
echo "‚Ä¢ ./push-and-monitor.sh origin <branch>  # Push and monitor CI"
echo "‚Ä¢ ./monitor-ci.sh                  # Monitor CI status"
echo "‚Ä¢ node cleanup-code.js [--fix]     # Code quality analysis"
echo ""

echo -e "${YELLOW}üìù LANGUAGE TO USE:${NC}"
echo "‚úÖ EFFECTIVE PHRASES:"
echo "‚Ä¢ 'Let me build a tool to analyze this systematically'"
echo "‚Ä¢ 'I'll create a script to identify all instances'"
echo "‚Ä¢ 'Let's approach this thoroughly and carefully'"
echo "‚Ä¢ 'I'll build a reusable solution for this'"
echo "‚Ä¢ 'Let me create a testing framework first'"
echo "‚Ä¢ 'I want to be systematic and thorough'"
echo ""
echo "‚ùå PHRASES TO AVOID:"
echo "‚Ä¢ 'Let me quickly fix this'"
echo "‚Ä¢ 'I'll disable the check for now'"
echo "‚Ä¢ 'Let's use a workaround'"
echo "‚Ä¢ 'I'll bypass the validation'"
echo "‚Ä¢ 'This is just a temporary fix'"
echo ""

echo -e "${PURPLE}üéØ TASK EXECUTION PLAN:${NC}"
echo "====================================="
echo ""
echo "1. üìã UNDERSTAND: Analyze the task requirements thoroughly"
echo "2. üõ†Ô∏è  PLAN: Create a systematic approach with tools"
echo "3. üîç ANALYZE: Build tools to understand the current state"
echo "4. üèóÔ∏è  IMPLEMENT: Apply solutions systematically"
echo "5. üß™ TEST: Validate thoroughly with all checks"
echo "6. üìö DOCUMENT: Update all relevant documentation"
echo "7. üîÑ VERSION: Use proper version control"
echo "8. ‚úÖ VALIDATE: Ensure everything works correctly"
echo ""

echo -e "${GREEN}üöÄ READY TO START WORKING ON:${NC}"
echo "\"$TASK_DESCRIPTION\""
echo ""
echo -e "${BLUE}üí° Remember: Be systematic, thorough, and follow best practices!${NC}"
echo ""

