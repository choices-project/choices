#!/bin/bash

# Choices Voting System - Supabase Setup Script
set -e

echo "🔧 Setting up Supabase connection for Choices voting system..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_blue() {
    echo -e "${BLUE}[SETUP]${NC} $1"
}

# Check if .env.local already exists
if [ -f ".env.local" ]; then
    print_warning ".env.local already exists. This script will help you update it."
    read -p "Do you want to continue? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

print_blue "Step 1: Supabase Project Setup"
echo ""
echo "To get your Supabase credentials:"
echo "1. Go to https://supabase.com and sign in"
echo "2. Create a new project or select an existing one"
echo "3. Go to Settings > API to find your credentials"
echo ""

# Get Supabase URL
read -p "Enter your Supabase URL (e.g., https://your-project-ref.supabase.co): " SUPABASE_URL

# Get Supabase Anon Key
read -p "Enter your Supabase Anon Key: " SUPABASE_ANON_KEY

# Get Supabase Service Role Key
read -p "Enter your Supabase Service Role Key: " SUPABASE_SERVICE_ROLE_KEY

# Get Database Password
read -p "Enter your Supabase Database Password: " DB_PASSWORD

# Extract project ref from URL
PROJECT_REF=$(echo $SUPABASE_URL | sed 's|https://||' | sed 's|.supabase.co||')

# Generate a secure random string for NEXTAUTH_SECRET
NEXTAUTH_SECRET=$(openssl rand -base64 32)

print_blue "Step 2: Creating .env.local file"

# Create .env.local file
cat > .env.local << EOF
# Local Development Environment Variables
# Generated by setup-supabase.sh

# Database Configuration (Supabase)
DATABASE_URL="postgresql://postgres:${DB_PASSWORD}@db.${PROJECT_REF}.supabase.co:5432/postgres"

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL="${SUPABASE_URL}"
NEXT_PUBLIC_SUPABASE_ANON_KEY="${SUPABASE_ANON_KEY}"
SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY}"

# Authentication
NEXTAUTH_SECRET="${NEXTAUTH_SECRET}"
NEXTAUTH_URL="http://localhost:3000"

# Environment
NODE_ENV="development"

# IA Service Configuration (will be generated when IA service starts)
IA_PUBLIC_KEY=""

# Security Note: Never commit actual values to version control
# All sensitive data should be stored in environment variables
EOF

print_status "✅ .env.local file created successfully!"

print_blue "Step 3: Testing Supabase Connection"

# Test the connection
if command -v psql &> /dev/null; then
    print_status "Testing database connection..."
    if PGPASSWORD=$DB_PASSWORD psql -h "db.${PROJECT_REF}.supabase.co" -U postgres -d postgres -c "SELECT version();" > /dev/null 2>&1; then
        print_status "✅ Database connection successful!"
    else
        print_warning "⚠️  Database connection failed. Please check your credentials."
    fi
else
    print_warning "⚠️  psql not found. Skipping database connection test."
fi

print_blue "Step 4: Next Steps"

echo ""
print_status "Your Supabase connection is now configured!"
echo ""
echo "📋 Next steps:"
echo "1. Start the development server: npm run dev"
echo "2. The system will automatically create database tables"
echo "3. Test the connection by visiting http://localhost:3000"
echo ""
echo "🔧 If you need to update credentials later:"
echo "   Edit .env.local file or run this script again"
echo ""
echo "🚀 To deploy to production:"
echo "   Add these environment variables to your hosting platform"
echo ""

print_status "Setup complete! 🎉"
