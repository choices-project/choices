{"version":3,"sources":["/Users/alaughingkitsune/src/Choices/web/lib/logger.ts"],"sourcesContent":["/**\n * Logger utility for development and production environments\n * Provides structured logging with environment-aware output\n */\n/**\n * Logger utility for development and production environments\n * Provides structured logging with environment-aware output\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  NONE = 4\n}\n\ninterface LogContext {\n  [key: string]: any;\n}\n\nclass Logger {\n  private level: LogLevel;\n  private isDevelopment: boolean;\n\n  constructor() {\n    this.isDevelopment = process.env.NODE_ENV === 'development';\n    this.level = this.isDevelopment ? LogLevel.DEBUG : LogLevel.ERROR;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.level;\n  }\n\n  private formatMessage(level: string, message: string, context?: LogContext): string {\n    const timestamp = new Date().toISOString();\n    const contextStr = context ? ` ${JSON.stringify(context)}` : '';\n    return `[${timestamp}] ${level}: ${message}${contextStr}`;\n  }\n\n  debug(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      // eslint-disable-next-line no-console\n      console.debug(this.formatMessage('DEBUG', message, context));\n    }\n  }\n\n  info(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      // eslint-disable-next-line no-console\n      console.info(this.formatMessage('INFO', message, context));\n    }\n  }\n\n  warn(message: string, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      // eslint-disable-next-line no-console\n      console.warn(this.formatMessage('WARN', message, context));\n    }\n  }\n\n  error(message: string, error?: Error, context?: LogContext): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      const errorContext = {\n        ...context,\n        error: error?.message,\n        stack: error?.stack\n      };\n      // eslint-disable-next-line no-console\n      console.error(this.formatMessage('ERROR', message, errorContext));\n    }\n  }\n\n  // API-specific logging\n  apiCall(endpoint: string, method: string, status?: number, duration?: number): void {\n    this.info('API Call', {\n      endpoint,\n      method,\n      status,\n      duration: duration ? `${duration}ms` : undefined\n    });\n  }\n\n  // Database-specific logging\n  dbQuery(operation: string, table: string, duration?: number): void {\n    this.debug('Database Query', {\n      operation,\n      table,\n      duration: duration ? `${duration}ms` : undefined\n    });\n  }\n\n  // User action logging\n  userAction(action: string, userId?: string, context?: LogContext): void {\n    this.info('User Action', {\n      action,\n      userId,\n      ...context\n    });\n  }\n\n  // Performance logging\n  performance(operation: string, duration: number, context?: LogContext): void {\n    this.info('Performance', {\n      operation,\n      duration: `${duration}ms`,\n      ...context\n    });\n  }\n}\n\n// Export singleton instance\nexport const logger = new Logger();\n\n// Convenience functions for common use cases\nexport const logApiCall = (endpoint: string, method: string, status?: number, duration?: number) => {\n  logger.apiCall(endpoint, method, status, duration);\n};\n\nexport const logDbQuery = (operation: string, table: string, duration?: number) => {\n  logger.dbQuery(operation, table, duration);\n};\n\nexport const logUserAction = (action: string, userId?: string, context?: LogContext) => {\n  logger.userAction(action, userId, context);\n};\n\nexport const logPerformance = (operation: string, duration: number, context?: LogContext) => {\n  logger.performance(operation, duration, context);\n};\n\n// Development-only logging (replaces logger.info)\nexport const devLog = (message: string, ...args: any[]) => {\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.log(`[DEV] ${message}`, ...args);\n  }\n};\n"],"names":["devLog","logApiCall","logDbQuery","logPerformance","logUserAction","logger","LogLevel","Logger","constructor","isDevelopment","process","env","NODE_ENV","level","shouldLog","formatMessage","message","context","timestamp","Date","toISOString","contextStr","JSON","stringify","debug","console","info","warn","error","errorContext","stack","apiCall","endpoint","method","status","duration","undefined","dbQuery","operation","table","userAction","action","userId","performance","args","log"],"mappings":"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"}