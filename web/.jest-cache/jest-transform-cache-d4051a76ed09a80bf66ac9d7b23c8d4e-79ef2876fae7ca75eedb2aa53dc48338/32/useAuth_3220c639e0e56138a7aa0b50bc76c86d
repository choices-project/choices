ec7503a53f22a4cbb30928453ceaed12
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAuth: function() {
        return useAuth;
    },
    useAuthActions: function() {
        return useAuthActions;
    },
    useAuthStatus: function() {
        return useAuthStatus;
    },
    useUser: function() {
        return useUser;
    }
});
const _react = require("react");
const _logger = require("../lib/logger");
const _auth = require("../lib/auth");
function useAuth() {
    const [state, setState] = (0, _react.useState)({
        user: null,
        isAuthenticated: false,
        isLoading: true,
        error: null
    });
    const authService = (0, _auth.getAuthService)();
    // Initialize authentication state
    (0, _react.useEffect)(()=>{
        const initializeAuth = async ()=>{
            try {
                setState((prev)=>({
                        ...prev,
                        isLoading: true,
                        error: null
                    }));
                // Check if user is authenticated
                if (authService.isAuthenticated()) {
                    // Get stored user first for immediate UI update
                    const storedUser = authService.getStoredUser();
                    if (storedUser) {
                        setState((prev)=>({
                                ...prev,
                                user: storedUser,
                                isAuthenticated: true,
                                isLoading: false
                            }));
                    }
                    // Fetch fresh user data from server
                    const user = await authService.getCurrentUser();
                    setState((prev)=>({
                            ...prev,
                            user,
                            isAuthenticated: !!user,
                            isLoading: false
                        }));
                } else {
                    setState((prev)=>({
                            ...prev,
                            user: null,
                            isAuthenticated: false,
                            isLoading: false
                        }));
                }
            } catch (error) {
                (0, _logger.devLog)("Auth initialization error:", error);
                setState((prev)=>({
                        ...prev,
                        user: null,
                        isAuthenticated: false,
                        isLoading: false,
                        error: error instanceof _auth.AuthError ? error : new _auth.AuthError("INIT_ERROR", "Failed to initialize authentication")
                    }));
            }
        };
        initializeAuth();
    }, [
        authService
    ]);
    // Login function
    const login = (0, _react.useCallback)(async (credentials)=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            const session = await authService.login(credentials);
            setState((prev)=>({
                    ...prev,
                    user: session.user,
                    isAuthenticated: true,
                    isLoading: false,
                    error: null
                }));
        } catch (error) {
            (0, _logger.devLog)("Login error:", error);
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    error: error instanceof _auth.AuthError ? error : new _auth.AuthError("LOGIN_ERROR", "Login failed")
                }));
            throw error;
        }
    }, [
        authService
    ]);
    // Register function
    const register = (0, _react.useCallback)(async (data)=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            const session = await authService.register(data);
            setState((prev)=>({
                    ...prev,
                    user: session.user,
                    isAuthenticated: true,
                    isLoading: false,
                    error: null
                }));
        } catch (error) {
            (0, _logger.devLog)("Registration error:", error);
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    error: error instanceof _auth.AuthError ? error : new _auth.AuthError("REGISTER_ERROR", "Registration failed")
                }));
            throw error;
        }
    }, [
        authService
    ]);
    // Logout function
    const logout = (0, _react.useCallback)(async ()=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            await authService.logout();
            setState((prev)=>({
                    ...prev,
                    user: null,
                    isAuthenticated: false,
                    isLoading: false,
                    error: null
                }));
        } catch (error) {
            (0, _logger.devLog)("Logout error:", error);
            // Even if logout fails, clear local state
            setState((prev)=>({
                    ...prev,
                    user: null,
                    isAuthenticated: false,
                    isLoading: false,
                    error: error instanceof _auth.AuthError ? error : new _auth.AuthError("LOGOUT_ERROR", "Logout failed")
                }));
        }
    }, [
        authService
    ]);
    // Refresh user function
    const refreshUser = (0, _react.useCallback)(async ()=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true,
                    error: null
                }));
            const user = await authService.getCurrentUser();
            setState((prev)=>({
                    ...prev,
                    user,
                    isAuthenticated: !!user,
                    isLoading: false,
                    error: null
                }));
        } catch (error) {
            (0, _logger.devLog)("Refresh user error:", error);
            setState((prev)=>({
                    ...prev,
                    user: null,
                    isAuthenticated: false,
                    isLoading: false,
                    error: error instanceof _auth.AuthError ? error : new _auth.AuthError("REFRESH_ERROR", "Failed to refresh user")
                }));
        }
    }, [
        authService
    ]);
    // Clear error function
    const clearError = (0, _react.useCallback)(()=>{
        setState((prev)=>({
                ...prev,
                error: null
            }));
    }, []);
    return {
        ...state,
        login,
        register,
        logout,
        refreshUser,
        clearError
    };
}
function useAuthStatus() {
    const { isAuthenticated, isLoading } = useAuth();
    return {
        isAuthenticated,
        isLoading
    };
}
function useUser() {
    const { user } = useAuth();
    return user;
}
function useAuthActions() {
    const { login, register, logout, refreshUser, clearError } = useAuth();
    return {
        login,
        register,
        logout,
        refreshUser,
        clearError
    };
}

//# sourceMappingURL=data:application/json;base64,