05d60261802995dd6c05d6c6311f552e
/**
 * Logger utility for development and production environments
 * Provides structured logging with environment-aware output
 */ /**
 * Logger utility for development and production environments
 * Provides structured logging with environment-aware output
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LogLevel: function() {
        return LogLevel;
    },
    devLog: function() {
        return devLog;
    },
    logApiCall: function() {
        return logApiCall;
    },
    logDbQuery: function() {
        return logDbQuery;
    },
    logPerformance: function() {
        return logPerformance;
    },
    logUserAction: function() {
        return logUserAction;
    },
    logger: function() {
        return logger;
    }
});
var LogLevel;
(function(LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["NONE"] = 4] = "NONE";
})(LogLevel || (LogLevel = {}));
class Logger {
    constructor(){
        this.isDevelopment = process.env.NODE_ENV === "development";
        this.level = this.isDevelopment ? 0 : 3;
    }
    shouldLog(level) {
        return level >= this.level;
    }
    formatMessage(level, message, context) {
        const timestamp = new Date().toISOString();
        const contextStr = context ? ` ${JSON.stringify(context)}` : "";
        return `[${timestamp}] ${level}: ${message}${contextStr}`;
    }
    debug(message, context) {
        if (this.shouldLog(0)) {
            // eslint-disable-next-line no-console
            console.debug(this.formatMessage("DEBUG", message, context));
        }
    }
    info(message, context) {
        if (this.shouldLog(1)) {
            // eslint-disable-next-line no-console
            console.info(this.formatMessage("INFO", message, context));
        }
    }
    warn(message, context) {
        if (this.shouldLog(2)) {
            // eslint-disable-next-line no-console
            console.warn(this.formatMessage("WARN", message, context));
        }
    }
    error(message, error, context) {
        if (this.shouldLog(3)) {
            const errorContext = {
                ...context,
                error: error?.message,
                stack: error?.stack
            };
            // eslint-disable-next-line no-console
            console.error(this.formatMessage("ERROR", message, errorContext));
        }
    }
    // API-specific logging
    apiCall(endpoint, method, status, duration) {
        this.info("API Call", {
            endpoint,
            method,
            status,
            duration: duration ? `${duration}ms` : undefined
        });
    }
    // Database-specific logging
    dbQuery(operation, table, duration) {
        this.debug("Database Query", {
            operation,
            table,
            duration: duration ? `${duration}ms` : undefined
        });
    }
    // User action logging
    userAction(action, userId, context) {
        this.info("User Action", {
            action,
            userId,
            ...context
        });
    }
    // Performance logging
    performance(operation, duration, context) {
        this.info("Performance", {
            operation,
            duration: `${duration}ms`,
            ...context
        });
    }
}
const logger = new Logger();
const logApiCall = (endpoint, method, status, duration)=>{
    logger.apiCall(endpoint, method, status, duration);
};
const logDbQuery = (operation, table, duration)=>{
    logger.dbQuery(operation, table, duration);
};
const logUserAction = (action, userId, context)=>{
    logger.userAction(action, userId, context);
};
const logPerformance = (operation, duration, context)=>{
    logger.performance(operation, duration, context);
};
const devLog = (message, ...args)=>{
    if (process.env.NODE_ENV === "development") {
        // eslint-disable-next-line no-console
        console.log(`[DEV] ${message}`, ...args);
    }
};

//# sourceMappingURL=data:application/json;base64,