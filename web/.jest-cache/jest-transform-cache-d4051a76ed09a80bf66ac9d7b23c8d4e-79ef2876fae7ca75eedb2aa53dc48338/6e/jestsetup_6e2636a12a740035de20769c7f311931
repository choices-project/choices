6eb009c41e6b8d8a5f102c5d28945361
"use strict";
// Mock Supabase client
jest.mock("@supabase/supabase-js", ()=>({
        createClient: jest.fn(()=>({
                auth: {
                    getUser: jest.fn().mockResolvedValue({
                        data: {
                            user: null
                        },
                        error: null
                    }),
                    getSession: jest.fn().mockResolvedValue({
                        data: {
                            session: null
                        },
                        error: null
                    }),
                    signInWithPassword: jest.fn().mockResolvedValue({
                        data: {
                            user: null
                        },
                        error: null
                    }),
                    signUp: jest.fn().mockResolvedValue({
                        data: {
                            user: null
                        },
                        error: null
                    }),
                    signOut: jest.fn().mockResolvedValue({
                        error: null
                    }),
                    onAuthStateChange: jest.fn().mockReturnValue({
                        data: {
                            subscription: {
                                unsubscribe: jest.fn()
                            }
                        }
                    })
                },
                from: jest.fn(()=>({
                        select: jest.fn().mockReturnThis(),
                        insert: jest.fn().mockReturnThis(),
                        update: jest.fn().mockReturnThis(),
                        delete: jest.fn().mockReturnThis(),
                        eq: jest.fn().mockReturnThis(),
                        single: jest.fn().mockResolvedValue({
                            data: null,
                            error: null
                        }),
                        then: jest.fn().mockResolvedValue({
                            data: [],
                            error: null
                        })
                    })),
                rpc: jest.fn().mockResolvedValue({
                    data: null,
                    error: null
                })
            }))
    }));
// Mock auth service
jest.mock("@/lib/auth", ()=>({
        getAuthService: jest.fn(()=>({
                isAuthenticated: jest.fn().mockReturnValue(false),
                getStoredUser: jest.fn().mockReturnValue(null),
                getCurrentUser: jest.fn().mockResolvedValue(null),
                login: jest.fn().mockResolvedValue({
                    user: null
                }),
                register: jest.fn().mockResolvedValue({
                    user: null
                }),
                logout: jest.fn().mockResolvedValue(),
                refreshUser: jest.fn().mockResolvedValue(null)
            }))
    }));
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter () {
            return {
                route: "/",
                pathname: "/",
                query: {},
                asPath: "/",
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false
            };
        }
    }));
// Mock Next.js image component
jest.mock("next/image", ()=>({
        __esModule: true,
        default: function MockImage(props) {
            return require("react").createElement("img", props);
        }
    }));
// Mock Next.js server components
jest.mock("next/server", ()=>({
        NextRequest: class MockNextRequest {
            constructor(url = "http://localhost:3000"){
                this.url = url;
                this.headers = new Map();
                this.method = "GET";
            }
        },
        NextResponse: {
            json: jest.fn((data)=>({
                    json: ()=>data
                })),
            redirect: jest.fn((url)=>({
                    url
                })),
            next: jest.fn(()=>({
                    next: true
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Set up test environment variables
process.env.NEXT_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
process.env.SUPABASE_SERVICE_ROLE_KEY = "test-service-role-key";
process.env.NEXTAUTH_SECRET = "test-secret";
process.env.NEXTAUTH_URL = "http://localhost:3000";
// Mock crypto API for DPoP tests
Object.defineProperty(global, "crypto", {
    value: {
        subtle: {
            generateKey: jest.fn().mockResolvedValue({
                publicKey: {
                    type: "public",
                    algorithm: {
                        name: "ECDSA"
                    }
                },
                privateKey: {
                    type: "private",
                    algorithm: {
                        name: "ECDSA"
                    }
                }
            }),
            exportKey: jest.fn().mockResolvedValue(new ArrayBuffer(32)),
            importKey: jest.fn().mockResolvedValue({
                type: "public",
                algorithm: {
                    name: "ECDSA"
                }
            }),
            sign: jest.fn().mockResolvedValue(new ArrayBuffer(64)),
            verify: jest.fn().mockResolvedValue(true)
        },
        getRandomValues: jest.fn().mockImplementation((array)=>{
            for(let i = 0; i < array.length; i++){
                array[i] = Math.floor(Math.random() * 256);
            }
            return array;
        })
    }
});
// Mock window.matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock performance API
Object.defineProperty(window, "performance", {
    value: {
        now: jest.fn(()=>Date.now()),
        mark: jest.fn(),
        measure: jest.fn(),
        getEntriesByType: jest.fn(()=>[]),
        memory: {
            usedJSHeapSize: 1000000,
            totalJSHeapSize: 2000000,
            jsHeapSizeLimit: 4000000
        }
    }
});
// Mock navigator
Object.defineProperty(window, "navigator", {
    value: {
        ...window.navigator,
        connection: {
            effectiveType: "4g",
            downlink: 10,
            rtt: 50
        },
        standalone: false,
        userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
    }
});
// Suppress console warnings in tests
const originalWarn = console.warn;
const originalError = console.error;
beforeAll(()=>{
    console.warn = (...args)=>{
        if (typeof args[0] === "string" && (args[0].includes("Warning: ReactDOM.render is deprecated") || args[0].includes("Warning: An update to") || args[0].includes("Warning: componentWillReceiveProps"))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
    console.error = (...args)=>{
        if (typeof args[0] === "string" && (args[0].includes("Failed to load devices") || args[0].includes("Warning: An update to"))) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.warn = originalWarn;
    console.error = originalError;
});

//# sourceMappingURL=data:application/json;base64,