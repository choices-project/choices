{"version":3,"sources":["/Users/alaughingkitsune/src/Choices/web/__tests__/auth/useAuth-simple.test.tsx"],"sourcesContent":["/**\n * Simple useAuth Hook Tests\n * Tests core authentication functionality\n * \n * Created: 2025-08-30\n * Status: Testing current authentication implementation\n */\n\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { describe, it, expect, jest } from '@jest/globals'\nimport { useAuth } from '@/hooks/useAuth'\nimport { AuthProvider } from '@/hooks/AuthProvider'\n\n// Mock the auth service with simple implementations\njest.mock('@/lib/auth', () => ({\n  getAuthService: jest.fn(() => ({\n    isAuthenticated: jest.fn().mockReturnValue(false),\n    getStoredUser: jest.fn().mockReturnValue(null),\n    getCurrentUser: jest.fn().mockResolvedValue(null),\n    login: jest.fn().mockResolvedValue({ user: null }),\n    register: jest.fn().mockResolvedValue({ user: null }),\n    logout: jest.fn().mockResolvedValue(),\n    refreshUser: jest.fn().mockResolvedValue(null),\n  }))\n}))\n\n// Simple test component\nconst TestComponent = () => {\n  const { user, isAuthenticated, isLoading, error } = useAuth()\n  \n  return (\n    <div>\n      <div data-testid=\"loading\">{isLoading ? 'Loading' : 'Not Loading'}</div>\n      <div data-testid=\"authenticated\">{isAuthenticated ? 'Authenticated' : 'Not Authenticated'}</div>\n      <div data-testid=\"user\">{user ? user.email : 'No User'}</div>\n      <div data-testid=\"error\">{error ? error.message : 'No Error'}</div>\n    </div>\n  )\n}\n\ndescribe('useAuth Hook - Simple Tests', () => {\n  it('renders without crashing', () => {\n    expect(() => {\n      render(\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      )\n    }).not.toThrow()\n  })\n\n  it('shows initial loading state', () => {\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    )\n\n    expect(screen.getByTestId('loading')).toHaveTextContent('Loading')\n  })\n\n  it('shows unauthenticated state after loading', async () => {\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    )\n\n    await waitFor(() => {\n      expect(screen.getByTestId('loading')).toHaveTextContent('Not Loading')\n    })\n\n    expect(screen.getByTestId('authenticated')).toHaveTextContent('Not Authenticated')\n    expect(screen.getByTestId('user')).toHaveTextContent('No User')\n    expect(screen.getByTestId('error')).toHaveTextContent('No Error')\n  })\n\n  it('provides auth context to children', () => {\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    )\n\n    expect(screen.getByTestId('loading')).toBeInTheDocument()\n    expect(screen.getByTestId('authenticated')).toBeInTheDocument()\n    expect(screen.getByTestId('user')).toBeInTheDocument()\n    expect(screen.getByTestId('error')).toBeInTheDocument()\n  })\n})\n"],"names":["jest","mock","getAuthService","fn","isAuthenticated","mockReturnValue","getStoredUser","getCurrentUser","mockResolvedValue","login","user","register","logout","refreshUser","TestComponent","isLoading","error","useAuth","div","data-testid","email","message","describe","it","expect","render","AuthProvider","not","toThrow","screen","getByTestId","toHaveTextContent","waitFor","toBeInTheDocument"],"mappings":"AAAA;;;;;;CAMC;;;;;uBAEuC;yBACG;yBACnB;8BACK;AAE7B,oDAAoD;AACpDA,aAAI,CAACC,IAAI,CAAC,cAAc,IAAO,CAAA;QAC7BC,gBAAgBF,aAAI,CAACG,EAAE,CAAC,IAAO,CAAA;gBAC7BC,iBAAiBJ,aAAI,CAACG,EAAE,GAAGE,eAAe,CAAC;gBAC3CC,eAAeN,aAAI,CAACG,EAAE,GAAGE,eAAe,CAAC;gBACzCE,gBAAgBP,aAAI,CAACG,EAAE,GAAGK,iBAAiB,CAAC;gBAC5CC,OAAOT,aAAI,CAACG,EAAE,GAAGK,iBAAiB,CAAC;oBAAEE,MAAM;gBAAK;gBAChDC,UAAUX,aAAI,CAACG,EAAE,GAAGK,iBAAiB,CAAC;oBAAEE,MAAM;gBAAK;gBACnDE,QAAQZ,aAAI,CAACG,EAAE,GAAGK,iBAAiB;gBACnCK,aAAab,aAAI,CAACG,EAAE,GAAGK,iBAAiB,CAAC;YAC3C,CAAA;IACF,CAAA;AAEA,wBAAwB;AACxB,MAAMM,gBAAgB;IACpB,MAAM,EAAEJ,IAAI,EAAEN,eAAe,EAAEW,SAAS,EAAEC,KAAK,EAAE,GAAGC,IAAAA,gBAAO;IAE3D,qBACE,sBAACC;;0BACC,qBAACA;gBAAIC,eAAY;0BAAWJ,YAAY,YAAY;;0BACpD,qBAACG;gBAAIC,eAAY;0BAAiBf,kBAAkB,kBAAkB;;0BACtE,qBAACc;gBAAIC,eAAY;0BAAQT,OAAOA,KAAKU,KAAK,GAAG;;0BAC7C,qBAACF;gBAAIC,eAAY;0BAASH,QAAQA,MAAMK,OAAO,GAAG;;;;AAGxD;AAEAC,IAAAA,iBAAQ,EAAC,+BAA+B;IACtCC,IAAAA,WAAE,EAAC,4BAA4B;QAC7BC,IAAAA,eAAM,EAAC;YACLC,IAAAA,aAAM,gBACJ,qBAACC,0BAAY;0BACX,cAAA,qBAACZ;;QAGP,GAAGa,GAAG,CAACC,OAAO;IAChB;IAEAL,IAAAA,WAAE,EAAC,+BAA+B;QAChCE,IAAAA,aAAM,gBACJ,qBAACC,0BAAY;sBACX,cAAA,qBAACZ;;QAILU,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,YAAYC,iBAAiB,CAAC;IAC1D;IAEAR,IAAAA,WAAE,EAAC,6CAA6C;QAC9CE,IAAAA,aAAM,gBACJ,qBAACC,0BAAY;sBACX,cAAA,qBAACZ;;QAIL,MAAMkB,IAAAA,cAAO,EAAC;YACZR,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,YAAYC,iBAAiB,CAAC;QAC1D;QAEAP,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB,CAAC;QAC9DP,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,SAASC,iBAAiB,CAAC;QACrDP,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,UAAUC,iBAAiB,CAAC;IACxD;IAEAR,IAAAA,WAAE,EAAC,qCAAqC;QACtCE,IAAAA,aAAM,gBACJ,qBAACC,0BAAY;sBACX,cAAA,qBAACZ;;QAILU,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,YAAYG,iBAAiB;QACvDT,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,kBAAkBG,iBAAiB;QAC7DT,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,SAASG,iBAAiB;QACpDT,IAAAA,eAAM,EAACK,aAAM,CAACC,WAAW,CAAC,UAAUG,iBAAiB;IACvD;AACF"}