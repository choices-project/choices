import { useState, useCallback } from 'react'
import { useDeviceDetection } from '@/hooks/useDeviceDetection'

// UI Components
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'

// Icons
import { Smartphone, Monitor, Tablet, Wifi, WifiOff, Zap, Battery, Camera, MapPin, Download, Settings, CheckCircle, AlertCircle } from 'lucide-react'

// Utilities
import { devLog } from '@/lib/logger'
import { cn } from '@/lib/utils'

interface DeviceOptimizationProps {
  className?: string
  showAdvanced?: boolean
}

export function DeviceOptimization({ className, showAdvanced = false }: DeviceOptimizationProps) {
  const {
    deviceInfo,
    capabilities,
    optimizationSettings,
    isLoading,
    error,
    updateOptimizationSettings,
    checkNetworkStatus,
    requestCameraAccess,
    requestLocationAccess,
    enableOfflineMode
  } = useDeviceDetection()

  const [networkStatus, setNetworkStatus] = useState<{ online: boolean; speed: 'slow' | 'medium' | 'fast' } | null>(null)
  const [isCheckingNetwork, setIsCheckingNetwork] = useState(false)
  const [isEnablingOffline, setIsEnablingOffline] = useState(false)

  const handleNetworkCheck = useCallback(async () => {
    setIsCheckingNetwork(true)
    try {
      const status = await checkNetworkStatus()
      setNetworkStatus(status)
      devLog('Network status:', status)
    } catch (error) {
      devLog('Error checking network status:', error)
    } finally {
      setIsCheckingNetwork(false)
    }
  }, [checkNetworkStatus])

  const handleOfflineModeToggle = useCallback(async () => {
    if (!optimizationSettings?.offlinemode) {
      setIsEnablingOffline(true)
      try {
        const success = await enableOfflineMode()
        if (success) {
          updateOptimizationSettings({ offlinemode: true })
        }
      } catch (error) {
        devLog('Error enabling offline mode:', error)
      } finally {
        setIsEnablingOffline(false)
      }
    } else {
      updateOptimizationSettings({ offlinemode: false })
    }
  }, [optimizationSettings?.offlinemode, enableOfflineMode, updateOptimizationSettings])

  const handleSettingToggle = useCallback((setting: keyof typeof optimizationSettings, value: boolean) => {
    updateOptimizationSettings({ [setting]: value })
  }, [updateOptimizationSettings])

  const getDeviceIcon = useCallback((type: string) => {
    switch (type) {
      case 'mobile': return <Smartphone className="h-5 w-5" />
      case 'tablet': return <Tablet className="h-5 w-5" />
      case 'desktop': return <Monitor className="h-5 w-5" />
      default: return <Monitor className="h-5 w-5" />
    }
  }, [])

  const getNetworkIcon = useCallback((online: boolean, speed: string) => {
    if (!online) return <WifiOff className="h-5 w-5 text-red-500" />
    switch (speed) {
      case 'slow': return <Wifi className="h-5 w-5 text-yellow-500" />
      case 'fast': return <Wifi className="h-5 w-5 text-green-500" />
      default: return <Wifi className="h-5 w-5 text-blue-500" />
    }
  }, [])

  if (isLoading) {
    return (
      <Card className={cn("w-full", className)}>
        <CardContent className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-3 text-gray-600">Detecting device...</span>
        </div>
      </Card>
    )
  }

  if (error) {
    return (
      <Card className={cn("w-full", className)}>
        <CardContent className="py-6">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>Failed to detect device capabilities: {error}</AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    )
  }

  if (!deviceInfo || !capabilities || !optimizationSettings) {
    return (
      <Card className={cn("w-full", className)}>
        <CardContent className="py-6">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>Device information not available</AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className={cn("space-y-6", className)}>
      {/* Device Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Settings className="h-5 w-5 mr-2" />
            Device Information
          </CardTitle>
          <CardDescription>
            Your device capabilities and current settings
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Device Type */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              {getDeviceIcon(deviceInfo.type)}
              <div>
                <Label className="font-medium">Device Type</Label>
                <p className="text-sm text-gray-600 capitalize">{deviceInfo.type}</p>
              </div>
            </div>
            <Badge variant="outline" className="capitalize">
              {deviceInfo.os} • {deviceInfo.browser}
            </Badge>
          </div>

          <Separator />

          {/* Screen Information */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium">Screen Resolution</Label>
              <p className="text-sm text-gray-600">
                {deviceInfo.screensize.width} × {deviceInfo.screensize.height}
              </p>
            </div>
            <div>
              <Label className="text-sm font-medium">Pixel Ratio</Label>
              <p className="text-sm text-gray-600">{deviceInfo.pixelratio}x</p>
            </div>
          </div>

          {/* Capabilities */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">Capabilities</Label>
            <div className="flex flex-wrap gap-2">
              {capabilities.touchsupport && (
                <Badge variant="secondary" className="text-xs">
                  <Zap className="h-3 w-3 mr-1" />
                  Touch Support
                </Badge>
              )}
              {capabilities.pwasupport && (
                <Badge variant="secondary" className="text-xs">
                  <Download className="h-3 w-3 mr-1" />
                  PWA Support
                </Badge>
              )}
              {capabilities.offlinesupport && (
                <Badge variant="secondary" className="text-xs">
                  <WifiOff className="h-3 w-3 mr-1" />
                  Offline Support
                </Badge>
              )}
              {capabilities.pushnotifications && (
                <Badge variant="secondary" className="text-xs">
                  <Zap className="h-3 w-3 mr-1" />
                  Push Notifications
                </Badge>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Network Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Wifi className="h-5 w-5 mr-2" />
            Network Status
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              {networkStatus ? getNetworkIcon(networkStatus.online, networkStatus.speed) : <Wifi className="h-5 w-5" />}
              <div>
                <Label className="font-medium">Connection</Label>
                <p className="text-sm text-gray-600">
                  {networkStatus ? (
                    networkStatus.online ? `Online (${networkStatus.speed})` : 'Offline'
                  ) : (
                    'Unknown'
                  )}
                </p>
              </div>
            </div>
            <Button
              onClick={handleNetworkCheck}
              disabled={isCheckingNetwork}
              size="sm"
              variant="outline"
            >
              {isCheckingNetwork ? 'Checking...' : 'Check Status'}
            </Button>
          </div>

          {capabilities.batterylevel !== undefined && (
            <>
              <Separator />
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label className="text-sm font-medium">Battery Level</Label>
                  <span className="text-sm text-gray-600">{capabilities.batterylevel.toFixed(0)}%</span>
                </div>
                <Progress value={capabilities.batterylevel} className="h-2" />
              </div>
            </>
          )}
        </CardContent>
      </Card>

      {/* Optimization Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Settings className="h-5 w-5 mr-2" />
            Optimization Settings
          </CardTitle>
          <CardDescription>
            Adjust settings for optimal performance on your device
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Image Quality */}
          <div className="flex items-center justify-between">
            <div>
              <Label>High Quality Images</Label>
              <p className="text-sm text-gray-600">
                {optimizationSettings.imagequality === 'high' ? 'Enabled' : 'Optimized for performance'}
              </p>
            </div>
            <Switch
              checked={optimizationSettings.imagequality === 'high'}
              onCheckedChange={(checked) => 
                handleSettingToggle('imagequality', checked ? 'high' : 'medium')
              }
            />
          </div>

          {/* Animations */}
          <div className="flex items-center justify-between">
            <div>
              <Label>Animations</Label>
              <p className="text-sm text-gray-600">
                {optimizationSettings.animationenabled ? 'Smooth animations' : 'Reduced motion'}
              </p>
            </div>
            <Switch
              checked={optimizationSettings.animationenabled}
              onCheckedChange={(checked) => handleSettingToggle('animationenabled', checked)}
            />
          </div>

          {/* Real-time Updates */}
          <div className="flex items-center justify-between">
            <div>
              <Label>Real-time Updates</Label>
              <p className="text-sm text-gray-600">
                {optimizationSettings.realtimeupdates ? 'Live updates enabled' : 'Manual refresh only'}
              </p>
            </div>
            <Switch
              checked={optimizationSettings.realtimeupdates}
              onCheckedChange={(checked) => handleSettingToggle('realtimeupdates', checked)}
            />
          </div>

          {/* Data Saver */}
          <div className="flex items-center justify-between">
            <div>
              <Label>Data Saver</Label>
              <p className="text-sm text-gray-600">
                {optimizationSettings.datasaver ? 'Reduced data usage' : 'Full content'}
              </p>
            </div>
            <Switch
              checked={optimizationSettings.datasaver}
              onCheckedChange={(checked) => handleSettingToggle('datasaver', checked)}
            />
          </div>

          {/* Offline Mode */}
          {capabilities.offlinesupport && (
            <div className="flex items-center justify-between">
              <div>
                <Label>Offline Mode</Label>
                <p className="text-sm text-gray-600">
                  {optimizationSettings.offlinemode ? 'Available offline' : 'Online only'}
                </p>
              </div>
              <Switch
                checked={optimizationSettings.offlinemode}
                onCheckedChange={handleOfflineModeToggle}
                disabled={isEnablingOffline}
              />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Advanced Features */}
      {showAdvanced && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Zap className="h-5 w-5 mr-2" />
              Advanced Features
            </CardTitle>
            <CardDescription>
              Access device-specific features and permissions
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Camera Access */}
            {capabilities.cameraaccess && (
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <Camera className="h-5 w-5" />
                  <div>
                    <Label>Camera Access</Label>
                    <p className="text-sm text-gray-600">Use camera for profile photos</p>
                  </div>
                </div>
                <Button
                  onClick={requestCameraAccess}
                  size="sm"
                  variant="outline"
                >
                  Request Access
                </Button>
              </div>
            )}

            {/* Location Access */}
            {capabilities.locationaccess && (
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <MapPin className="h-5 w-5" />
                  <div>
                    <Label>Location Access</Label>
                    <p className="text-sm text-gray-600">Enable location-based features</p>
                  </div>
                </div>
                <Button
                  onClick={requestLocationAccess}
                  size="sm"
                  variant="outline"
                >
                  Request Access
                </Button>
              </div>
            )}

            {/* Storage Information */}
            {capabilities.storagequota > 0 && (
              <div className="space-y-2">
                <Label className="text-sm font-medium">Available Storage</Label>
                <p className="text-sm text-gray-600">
                  {Math.round(capabilities.storagequota / (1024 * 1024 * 1024))} GB available
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}
