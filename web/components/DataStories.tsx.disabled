'use client';

import React, { useState } from 'react';
import { 
  TrendingUp, 
  TrendingDown, 
  Minus, 
  BarChart3, 
  PieChart, 
  LineChart,
  Activity,
  Target,
  Users,
  Calendar,
  MapPin,
  Filter,
  Eye,
  Download,
  Share2
} from 'lucide-react';

interface DataStory {
  id: string;
  title: string;
  subtitle: string;
  chart: 'bar' | 'line' | 'pie' | 'trend' | 'heatmap' | 'scatter' | 'radar';
  data: any[];
  insight: string;
  trend: 'up' | 'down' | 'stable';
  color: string;
  filters?: {
    timeRange?: string[];
    categories?: string[];
    regions?: string[];
  };
  statisticalanalysis?: {
    samplesize: string;
    marginoferror: string;
    confidencelevel: string;
    methodology: string;
    keyfinding: string;
  };
}

interface DataStoriesProps {
  stories: DataStory[];
  title?: string;
  subtitle?: string;
  showFilters?: boolean;
  maxStories?: number;
}

export const DataStories: React.FC<DataStoriesProps> = (
  stories,
  title = 'Data Insights',
  subtitle = 'Discover trends and patterns in voting behavior',
  showFilters = true,
  maxStories = 3
}) => {
  const [selectedStory, setSelectedStory] = useState<DataStory | null>(null);
  const [timeFilter, setTimeFilter] = useState<string>('all');
  const [categoryFilter, setCategoryFilter] = useState<string>('all');

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up':
        return <TrendingUp className="w-5 h-5 text-green-500" />;
      case 'down':
        return <TrendingDown className="w-5 h-5 text-red-500" />;
      case 'stable':
        return <Minus className="w-5 h-5 text-gray-500" />;
      default:
        return <Minus className="w-5 h-5 text-gray-500" />;
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up':
        return 'text-green-600 bg-green-50 border-green-200';
      case 'down':
        return 'text-red-600 bg-red-50 border-red-200';
      case 'stable':
        return 'text-gray-600 bg-gray-50 border-gray-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getChartIcon = (chartType: string) => {
    switch (chartType) {
      case 'bar':
        return <BarChart3 className="w-5 h-5" />;
      case 'pie':
        return <PieChart className="w-5 h-5" />;
      case 'line':
        return <LineChart className="w-5 h-5" />;
      case 'trend':
        return <Activity className="w-5 h-5" />;
      default:
        return <BarChart3 className="w-5 h-5" />;
    }
  };

  const renderChart = (story: DataStory) => {
    const chartData = story.data;
    
    switch (story.chart) {
      case 'bar':
        return (
          <div className="space-y-3">
            {chartData.map((item: any, index: any) => (
              <div key={index} className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-gray-700">{item.name}</span>
                  <div className="flex items-center gap-2">
                    <span className="text-gray-600">{item.value}%</span>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      item.trend.startsWith('+') ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                    }`}>
                      {item.trend}
                    </span>
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="h-3 rounded-full transition-all duration-1000"
                    style={{ 
                      width: `${item.value}%`,
                      backgroundColor: item.color || story.color
                    }}
                  />
                </div>
              </div>
            ))}
          </div>
        );

      case 'pie':
        return (
          <div className="grid grid-cols-2 gap-4">
            {chartData.map((item: any, index: any) => (
              <div key={index} className="text-center">
                <div className="relative w-20 h-20 mx-auto mb-2">
                  <svg className="w-20 h-20 transform -rotate-90" viewBox="0 0 36 36">
                    <path
                      d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                      fill="none"
                      stroke="#e5e7eb"
                      strokeWidth="3"
                    />
                    <path
                      d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                      fill="none"
                      stroke={item.color || story.color}
                      strokeWidth="3"
                      strokeDasharray={`${item.value}, 100`}
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-sm font-bold text-gray-700">{item.value}%</span>
                  </div>
                </div>
                <div className="text-xs text-gray-600">{item.name}</div>
              </div>
            ))}
          </div>
        );

      case 'trend':
        return (
          <div className="space-y-4">
            {chartData.map((item: any, index: any) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center gap-3">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: item.color || story.color }}
                  />
                  <span className="font-medium text-gray-700">{item.name}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-lg font-bold text-gray-900">{item.value}%</span>
                  <div className="flex items-center gap-1">
                    {item.trend.startsWith('+') ? (
                      <TrendingUp className="w-4 h-4 text-green-500" />
                    ) : (
                      <TrendingDown className="w-4 h-4 text-red-500" />
                    )}
                    <span className={`text-xs ${
                      item.trend.startsWith('+') ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {item.trend}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        );

      default:
        return (
          <div className="text-center py-8 text-gray-500">
            <BarChart3 className="w-12 h-12 mx-auto mb-2" />
            <p>Chart visualization coming soon</p>
          </div>
        );
    }
  };

  const displayedStories = stories.slice(0, maxStories);

  return (
    <section className="py-16 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">{title}</h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">{subtitle}</p>
        </div>

        {/* Filters */}
        {showFilters && (
          <div className="mb-8 flex flex-wrap gap-4 justify-center">
            <div className="flex items-center gap-2">
              <Calendar className="w-4 h-4 text-gray-500" />
              <select
                value={timeFilter}
                onChange={(e) => setTimeFilter(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Time</option>
                <option value="week">Last Week</option>
                <option value="month">Last Month</option>
                <option value="quarter">Last Quarter</option>
                <option value="year">Last Year</option>
              </select>
            </div>

            <div className="flex items-center gap-2">
              <Filter className="w-4 h-4 text-gray-500" />
              <select
                value={categoryFilter}
                onChange={(e) => setCategoryFilter(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Categories</option>
                <option value="climate">Climate</option>
                <option value="technology">Technology</option>
                <option value="education">Education</option>
                <option value="healthcare">Healthcare</option>
              </select>
            </div>
          </div>
        )}

        {/* Stories Grid */}
        <div className="grid lg:grid-cols-2 xl:grid-cols-3 gap-8">
          {displayedStories.map((story: any) => (
            <div
              key={story.id}
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow duration-200"
            >
              {/* Header */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-2">
                    {getChartIcon(story.chart)}
                    <span className="text-sm font-medium text-gray-500 uppercase tracking-wide">
                      {story.chart} Chart
                    </span>
                  </div>
                  <div className="flex items-center gap-1">
                    {getTrendIcon(story.trend)}
                    <span className={`text-xs px-2 py-1 rounded-full border ${getTrendColor(story.trend)}`}>
                      {story.trend === 'up' ? 'Trending Up' : story.trend === 'down' ? 'Trending Down' : 'Stable'}
                    </span>
                  </div>
                </div>

                <h3 className="text-xl font-bold text-gray-900 mb-2">{story.title}</h3>
                <p className="text-gray-600 text-sm leading-relaxed">{story.subtitle}</p>
              </div>

              {/* Chart */}
              <div className="p-6">
                {renderChart(story)}
              </div>

              {/* Insight */}
              <div className="px-6 pb-6">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-start gap-3">
                    <Target className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <h4 className="font-medium text-blue-900 mb-1">Key Insight</h4>
                      <p className="text-blue-800 text-sm leading-relaxed">{story.insight}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Statistical Analysis */}
              {story.statisticalanalysis && (
                <div className="px-6 pb-6">
                  <details className="group">
                    <summary className="flex items-center gap-2 text-sm font-medium text-gray-700 cursor-pointer hover:text-gray-900">
                      <Activity className="w-4 h-4" />
                      Statistical Analysis
                      <div className="w-4 h-4 group-open:rotate-180 transition-transform duration-200">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                          <path d="m6 9 6 6 6-6"/>
                        </svg>
                      </div>
                    </summary>
                    <div className="mt-3 space-y-2 text-xs text-gray-600">
                      <div className="flex justify-between">
                        <span>Sample Size:</span>
                        <span className="font-medium">{story.statisticalanalysis.samplesize}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Margin of Error:</span>
                        <span className="font-medium">{story.statisticalanalysis.marginoferror}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Confidence Level:</span>
                        <span className="font-medium">{story.statisticalanalysis.confidencelevel}</span>
                      </div>
                      <div className="pt-2 border-t border-gray-200">
                        <p className="font-medium text-gray-700 mb-1">Key Finding:</p>
                        <p className="text-gray-600">{story.statisticalanalysis.keyfinding}</p>
                      </div>
                    </div>
                  </details>
                </div>
              )}

              {/* Actions */}
              <div className="px-6 py-4 bg-gray-50 border-t border-gray-100">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <Users className="w-4 h-4" />
                    <span>{story.data.reduce((sum: any, item: any) => sum + (item.samplesize || 0), 0).toLocaleString()} respondents</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                      <Eye className="w-4 h-4" />
                    </button>
                    <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                      <Download className="w-4 h-4" />
                    </button>
                    <button className="p-2 text-gray-400 hover:text-gray-600 transition-colors">
                      <Share2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* View All Button */}
        {stories.length > maxStories && (
          <div className="text-center mt-12">
            <button className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200">
              <Eye className="w-4 h-4" />
              View All Insights
            </button>
          </div>
        )}

        {/* Methodology Note */}
        <div className="mt-12 text-center">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 rounded-lg">
            <Target className="w-4 h-4 text-gray-600" />
            <span className="text-sm text-gray-600">
              All data is anonymized and aggregated for privacy protection
            </span>
          </div>
        </div>
      </div>
    </section>
  );
};

export default DataStories;
