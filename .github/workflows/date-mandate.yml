name: Date Mandate

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]

jobs:
  date-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }
      
      - name: Get current date
        id: date
        run: echo "TODAY=$(date -u +%F)" >> $GITHUB_OUTPUT
      
      - name: Skip PR body date check
        run: |
          echo "‚úÖ PR body date check disabled - focusing on documentation validation only"
      
      - name: Check core documentation dates
        run: |
          TODAY="${{ steps.date.outputs.TODAY }}"
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          echo "=== Core Documentation Date Check ==="
          echo "TODAY: $TODAY"
          echo "BASE: $BASE"
          echo "HEAD: $HEAD"
          
          # Define core documentation paths (only these require date headers)
          CORE_DOCS_PATTERNS=(
            "docs/**/*.md"
            "README.md"
            "CONTRIBUTING.md"
            "SECURITY.md"
            "CHANGELOG.md"
            "LICENSE.md"
          )
          
          # Get changed markdown files
          CHANGED=$(git diff --name-only "$BASE..$HEAD" | grep -E '\.(md|MD)$' || true)
          
          echo "All changed markdown files: $CHANGED"
          
          if [ -z "$CHANGED" ]; then
            echo "No markdown files changed"
            exit 0
          fi
          
          # Filter to only core documentation files
          CORE_CHANGED=""
          for FILE in $CHANGED; do
            # Skip if file doesn't exist (was deleted)
            if [ ! -f "$FILE" ]; then
              echo "‚è≠Ô∏è  Skipping deleted file: $FILE"
              continue
            fi
            
            # Check if this is a core documentation file
            IS_CORE=false
            for PATTERN in "${CORE_DOCS_PATTERNS[@]}"; do
              if [[ "$FILE" == $PATTERN ]]; then
                IS_CORE=true
                break
              fi
            done
            
            if [ "$IS_CORE" = true ]; then
              CORE_CHANGED="$CORE_CHANGED $FILE"
              echo "üìã Core doc: $FILE"
            else
              echo "‚è≠Ô∏è  Skipping temp/analysis file: $FILE"
            fi
          done
          
          if [ -z "$CORE_CHANGED" ]; then
            echo "‚úÖ No core documentation files changed - skipping date validation"
            exit 0
          fi
          
          echo "Core documentation files requiring date validation: $CORE_CHANGED"
          
          # Check each core documentation file
          FAIL=0
          for FILE in $CORE_CHANGED; do
            echo "=== Checking core doc: $FILE ==="
            
            # Check if file has Last Updated header
            if grep -q "Last Updated:" "$FILE"; then
              # Check if Last Updated date is today
              if grep -q "Last Updated: $TODAY" "$FILE"; then
                echo "‚úÖ $FILE has correct Last Updated date"
              else
                echo "::error file=$FILE::Last Updated date must be $TODAY"
                FAIL=1
              fi
            else
              echo "::error file=$FILE::Missing 'Last Updated: $TODAY' header"
              FAIL=1
            fi
          done
          
          if [ "$FAIL" -eq 1 ]; then
            echo "::error::Core documentation date validation failed"
            exit 1
          fi
          
          echo "‚úÖ All core documentation dates are correct"
