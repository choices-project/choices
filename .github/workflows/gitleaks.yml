name: GitLeaks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC

permissions:
  contents: read

concurrency:
  group: gitleaks-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Make the license available to all steps by default
    env:
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Confirm PR isn't a fork (for debugging)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "Head repo: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.event.pull_request.base.repo.full_name }}"
          echo "Is fork?:  ${{ github.event.pull_request.head.repo.fork }}"

      - name: Assert license presence
        id: license
        run: |
          if [ -z "${GITLEAKS_LICENSE:-}" ]; then
            echo "present=false" >> "$GITHUB_OUTPUT"
          else
            echo "present=true" >> "$GITHUB_OUTPUT"
            # show length (masked) to catch trailing newlines/whitespace issues
            echo "Length of GITLEAKS_LICENSE: ${#GITLEAKS_LICENSE}"
          fi

      - name: Fail if license missing (same-repo PRs should have it)
        if: ${{ steps.license.outputs.present == 'false' }}
        run: |
          echo "::error::GITLEAKS_LICENSE is not available to this job."
          echo "Check **Settings → Secrets and variables → Actions** (repo level):"
          echo "  - Secret name EXACTLY 'GITLEAKS_LICENSE'"
          echo "  - Stored as a Secret (not a Variable)"
          echo "If relying on org-level secret:"
          echo "  - It must be an **Actions** secret"
          echo "  - Scope must include this repository (Selected repositories)"
          echo "Also verify no environment scoping is required (this job has no 'environment:' block)."
          exit 1

      - name: Run GitLeaks
        if: ${{ steps.license.outputs.present == 'true' }}
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner -v --redact --source . --config .gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
