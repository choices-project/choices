name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'
  NPM_VERSION: '10.9.3'

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: web
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Use repo's npm version
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Clean workspace
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm run ci:install

      - name: Verify lockfile unchanged
        run: git diff --exit-code package-lock.json

      - name: Type check (strict)
        run: npm run type-check:strict

      - name: Lint (strict mode)
        run: npm run lint:strict

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit -- --coverage --coverageReporters=lcov --coverageReporters=text

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration -- --coverage --coverageReporters=lcov --coverageReporters=text

      - name: Upload unit test coverage
        if: matrix.test-type == 'unit' && ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload integration test coverage
        if: matrix.test-type == 'integration' && ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: integration-tests
          name: integration-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: web
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Use repo's npm version
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Clean workspace
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm run ci:install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }} --reporter=html,junit
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: web/playwright-report/
          retention-days: 7

      - name: Upload E2E test results (JUnit)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: web/test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Use repo's npm version
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Clean workspace
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm run ci:install

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run performance tests
        run: npx playwright test --project=chromium --grep="performance" --reporter=html,junit
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3000

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: web/playwright-report/
          retention-days: 7

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Use repo's npm version
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Clean workspace
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm run ci:install

      - name: Security audit
        run: npm run audit:high

      - name: Check for secrets
        run: npm run security-check

      - name: Next.js security check
        run: npm run check:next-security

      - name: Test security headers
        run: npm run test:security-headers

      - name: Trivy vulnerability scan (CRITICAL/HIGH)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'
          scanners: vuln

  # Load Tests
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    defaults:
      run:
        working-directory: web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Use repo's npm version
        run: npm i -g npm@${{ env.NPM_VERSION }}

      - name: Clean workspace
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm run ci:install

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run load tests
        run: npx playwright test --project=chromium --grep="load" --reporter=html,junit
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3000

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: web/playwright-report/
          retention-days: 7

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, performance-tests, security-tests, load-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Status" >> test-summary.md
          echo "- Unit & Integration Tests: ${{ needs.unit-integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
          echo "- Load Tests: ${{ needs.load-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Coverage Reports" >> test-summary.md
          echo "Coverage reports are available in the Codecov dashboard." >> test-summary.md
          echo "" >> test-summary.md
          echo "## Test Artifacts" >> test-summary.md
          echo "Detailed test reports are available in the workflow artifacts." >> test-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md
          retention-days: 30
